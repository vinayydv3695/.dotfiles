const{parentPort}=require("worker_threads"),path2ModuleCache=new Map;function requireInstance(e){let t=path2ModuleCache.get(e);if(!t){if(t=require(e),!t.format)throw new Error("wrong instance");path2ModuleCache.set(e,t)}return t}parentPort.on("message",(({type:e,payload:t})=>{switch(e){case"import":{const{modulePath:r}=t;try{const t=requireInstance(r);parentPort.postMessage({type:e,payload:{version:t.version}})}catch{parentPort.postMessage({type:e,payload:{version:null}})}break}case"callMethod":{const{modulePath:r,methodName:a,methodArgs:o,id:s}=t,n=t=>{parentPort.postMessage({type:e,payload:{result:t,id:s,isError:!0}})};let p,c=path2ModuleCache.get(r);if(!c)try{c=requireInstance(r)}catch(e){n(e)}try{p=c[a](...o)}catch(e){n(e)}if(p instanceof Promise){p.then((t=>{try{"getSupportInfo"===a&&(t={languages:t.languages}),parentPort.postMessage({type:e,payload:{result:t,id:s,isError:!1}})}catch(e){n(e)}}),(e=>{n(e)}));break}try{"getSupportInfo"===a&&(p={languages:p.languages}),parentPort.postMessage({type:e,payload:{result:p,id:s,isError:!1}})}catch(e){n(e)}break}}}));